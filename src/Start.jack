class Start{
    field int cursor_x, cursor_y;
    constructor Start new(){
       let cursor_x = 0;
       let cursor_y = 0; 
       return this;
    }
    method int getX() {
        return cursor_x;
    }

    method int getY() {
        return cursor_y;
    }

    method void run(Start as){
        var TankGame tankGame;
        var String returnString;
        var Terminate terminate;
        var Start s;
        var int n,x,y,m;
        var boolean exit,w;
        let s=as;
        let exit = false;
        let w=false;
        let s= Start.new();
        let x=90;
        let y=50;
        do printBackground();
        do Screen.setColor(false);
        do Screen.drawRectangle(x-20,y-10,x+320,200);
        do Output.moveCursor(11,21);

        do s.set_cursor(90,50);
        do s.draw_B();
        do Sys.wait(500);

        do s.set_cursor(108,50);
        do s.draw_A();
        do Sys.wait(500);

        do s.set_cursor(126,50);
        do s.draw_T();
        do Sys.wait(500);

        do s.set_cursor(128,50);
        do s.draw_T();
        do Sys.wait(500);

        do s.set_cursor((x+72-18),y);
        do s.draw_L();
        do Sys.wait(500);

        do s.set_cursor(x+83,y);
        do s.draw_E();
        do Sys.wait(500);

        do s.set_cursor(x+118,y);
        do s.draw_O();
        do Sys.wait(500);

        do s.set_cursor(x+137,y);
        do s.draw_F();
        do Sys.wait(500);

        do s.set_cursor(x+168,y);
        do s.draw_T();
        do Sys.wait(500);

        do s.set_cursor(x+184,y);
        do s.draw_H();
        do Sys.wait(500);

        do s.set_cursor(x+201,y);
        do s.draw_E();
        do Sys.wait(500);

        do s.set_cursor(x+230,y);
        do s.draw_T();
        do Sys.wait(500);

        do s.set_cursor(x+247,y);
        do s.draw_A();
        do Sys.wait(500);

        do s.set_cursor(x+265,y);
        do s.draw_N();
        do Sys.wait(500);

        do s.set_cursor(x+281,y);
        do s.draw_K();
        do Sys.wait(500);

        do s.set_cursor(x+297,y);
        do s.draw_S();
        do Sys.wait(500);

        do s.set_cursor(210,y+30);
        do s.TankRight();
        do s.set_cursor(260,y+30);
        do s.TankLeft();

        do Output.moveCursor(11,18);
        do Output.printString("Please Choose any Option:-");
        do Output.println();
        do Output.moveCursor(13,23);
        do Output.printString("1. Start Game..");
        do Output.println();
        do Output.moveCursor(14,23);
        do Output.printString("2. Instructions.");
        do Output.println();
        while(~(exit)){
            let n = Keyboard.keyPressed();
            if((n=49) | (n=50)){
                let exit = true;
            }
        }

        if(n=49){
            do Screen.clearScreen();
            let tankGame = TankGame.new(410, 150, 103, 50 );
            let returnString = tankGame.run();
            do tankGame.dispose();
            do terminate.printStop(returnString);
        }

        if(n=50){
            do Sys.wait(1000);
            do Screen.clearScreen();
            do Output.moveCursor(3,25);
            do Output.printString("  Instructions:-");
            do Output.moveCursor(5,10);
            do Output.printString("   For Tank1:-");
            do Output.moveCursor(5,45);
            do Output.printString("For Tank2:-");

            do s.set_cursor(130,90);
            do s.draw_UP();
            do Output.moveCursor(8,25);
            do Output.printString("<---Move UP--->");
            do s.set_cursor(386,90);
            do s.draw_W();

            do s.set_cursor(130,130);
            do s.draw_Down();
            do Output.moveCursor(12,25);
            do Output.printString("<---Move Down--->");
            do s.set_cursor(386,130);
            do s.draw_S();

            do s.set_cursor(130,110);
            do s.draw_Left();
            do Output.moveCursor(10,25);
            do Output.printString("<---Move LEFT--->");
            do s.set_cursor(386,110);
            do s.draw_A();

            do s.set_cursor(130,150);
            do s.draw_Right();
            do Output.moveCursor(14,25);
            do Output.printString("<---Move RIGHT--->");
            do s.set_cursor(386,150);
            do s.draw_D();

            do Output.moveCursor(16,15);
            do Output.printString("Enter");
            do Output.moveCursor(16,25);
            do Output.printString("<---To FIRE--->");
            do Output.moveCursor(16,46);
            do Output.printString("SPACE");
            do Output.moveCursor(18,23);
            do Output.printString("Do You Want To Play Now... ");
            do Output.moveCursor(20,30);
            do Output.printString("1. Yes");
            do Output.moveCursor(21,30);
            do Output.printString("2. No");
            while(~(w)){
                let m = Keyboard.keyPressed();
                if((m=49) | (m=50)){
                    let w = true;
                }
            }
            if(m=49){
                do Screen.clearScreen();
                let tankGame = TankGame.new(410, 150, 103, 50 );
                let returnString = tankGame.run();
                do tankGame.dispose();
                do terminate.printStop(returnString);
            }
            if(m=50){
                let returnString = null;
                do terminate.printStop(returnString);
            }
            
        }
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    method void set_cursor(int ax, int ay) {
        let cursor_x = ax;
        let cursor_y = ay;
        return;
    }
    method void draw_B() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, 16383);
        do Memory.poke(memAddress+32, 32767);
        do Memory.poke(memAddress+64, -8189);
        do Memory.poke(memAddress+96, -16381);
        do Memory.poke(memAddress+128, -32765);
        do Memory.poke(memAddress+160, -16381);
        do Memory.poke(memAddress+192, 24579);
        do Memory.poke(memAddress+224, 16383);
        do Memory.poke(memAddress+256, 32767);
        do Memory.poke(memAddress+288, -16381);
        do Memory.poke(memAddress+320, -32765);
        do Memory.poke(memAddress+352, -16381);
        do Memory.poke(memAddress+384, -8189);
        do Memory.poke(memAddress+416, -4093);
        do Memory.poke(memAddress+448, 32767);
        do Memory.poke(memAddress+480, 16383);
        return;
    }
    method void draw_A() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, 8184);
        do Memory.poke(memAddress+32, 16380);
        do Memory.poke(memAddress+64, 28686);
        do Memory.poke(memAddress+96, -8185);
        do Memory.poke(memAddress+128, -16381);
        do Memory.poke(memAddress+160, -16381);
        do Memory.poke(memAddress+192, -16381);
        do Memory.poke(memAddress+224, -16381);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, -1);
        do Memory.poke(memAddress+320, -16381);
        do Memory.poke(memAddress+352, -16381);
        do Memory.poke(memAddress+384, -16381);
        do Memory.poke(memAddress+416, -16381);
        do Memory.poke(memAddress+448, -16381);
        do Memory.poke(memAddress+480, -16381);
        return;
    }
    method void draw_T() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, -1);
        do Memory.poke(memAddress+32, -1);
        do Memory.poke(memAddress+64, 384);
        do Memory.poke(memAddress+96, 384);
        do Memory.poke(memAddress+128, 384);
        do Memory.poke(memAddress+160, 384);
        do Memory.poke(memAddress+192, 384);
        do Memory.poke(memAddress+224, 384);
        do Memory.poke(memAddress+256, 384);
        do Memory.poke(memAddress+288, 384);
        do Memory.poke(memAddress+320, 384);
        do Memory.poke(memAddress+352, 384);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 384);
        do Memory.poke(memAddress+448, 384);
        do Memory.poke(memAddress+480, 384);
        return;
    }
    method void draw_L() {
    var int memAddress;
    let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
    do Memory.poke(memAddress+0, 3);
	do Memory.poke(memAddress+32, 3);
	do Memory.poke(memAddress+64, 3);
	do Memory.poke(memAddress+96, 3);
	do Memory.poke(memAddress+128, 3);
	do Memory.poke(memAddress+160, 3);
	do Memory.poke(memAddress+192, 3);
	do Memory.poke(memAddress+224, 3);
	do Memory.poke(memAddress+256, 3);
	do Memory.poke(memAddress+288, 3);
	do Memory.poke(memAddress+320, 3);
	do Memory.poke(memAddress+352, 3);
	do Memory.poke(memAddress+384, 3);
	do Memory.poke(memAddress+416, 3);
	do Memory.poke(memAddress+448, 2047);
	do Memory.poke(memAddress+480, 2047);
        return;
    }
    method void draw_E() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, -1);
        do Memory.poke(memAddress+32, -1);
        do Memory.poke(memAddress+64, 7);
        do Memory.poke(memAddress+96, 7);
        do Memory.poke(memAddress+128, 7);
        do Memory.poke(memAddress+160, 7);
        do Memory.poke(memAddress+192, 7);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, 7);
        do Memory.poke(memAddress+320, 7);
        do Memory.poke(memAddress+352, 7);
        do Memory.poke(memAddress+384, 7);
        do Memory.poke(memAddress+416, 7);
        do Memory.poke(memAddress+448, -1);
        do Memory.poke(memAddress+480, -1);
        return;
    }
    method void draw_F() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, -1);
        do Memory.poke(memAddress+32, -1);
        do Memory.poke(memAddress+64, 7);
        do Memory.poke(memAddress+96, 7);
        do Memory.poke(memAddress+128, 7);
        do Memory.poke(memAddress+160, 7);
        do Memory.poke(memAddress+192, 7);
        do Memory.poke(memAddress+224, 8191);
        do Memory.poke(memAddress+256, 8191);
        do Memory.poke(memAddress+288, 7);
        do Memory.poke(memAddress+320, 7);
        do Memory.poke(memAddress+352, 7);
        do Memory.poke(memAddress+384, 7);
        do Memory.poke(memAddress+416, 7);
        do Memory.poke(memAddress+448, 7);
        do Memory.poke(memAddress+480, 7);
        return;
    }
    method void draw_O() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, 8184);
        do Memory.poke(memAddress+32, 16380);
        do Memory.poke(memAddress+64, 30750);
        do Memory.poke(memAddress+96, -4081);
        do Memory.poke(memAddress+128, -8185);
        do Memory.poke(memAddress+160, -8185);
        do Memory.poke(memAddress+192, -8185);
        do Memory.poke(memAddress+224, -8185);
        do Memory.poke(memAddress+256, -8185);
        do Memory.poke(memAddress+288, -8185);
        do Memory.poke(memAddress+320, -8185);
        do Memory.poke(memAddress+352, -8185);
        do Memory.poke(memAddress+384, -4081);
        do Memory.poke(memAddress+416, 30750);
        do Memory.poke(memAddress+448, 16380);
        do Memory.poke(memAddress+480, 8184);
        return;
    }
    method void draw_H() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, -16381);
        do Memory.poke(memAddress+32, -16381);
        do Memory.poke(memAddress+64, -16381);
        do Memory.poke(memAddress+96, -16381);
        do Memory.poke(memAddress+128, -16381);
        do Memory.poke(memAddress+160, -16381);
        do Memory.poke(memAddress+192, -16381);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, -16381);
        do Memory.poke(memAddress+320, -16381);
        do Memory.poke(memAddress+352, -16381);
        do Memory.poke(memAddress+384, -16381);
        do Memory.poke(memAddress+416, -16381);
        do Memory.poke(memAddress+448, -16381);
        do Memory.poke(memAddress+480, -16381);
        return;
    }
    method void draw_D() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, 8191);
        do Memory.poke(memAddress+32, 16383);
        do Memory.poke(memAddress+64, 30727);
        do Memory.poke(memAddress+96, -4089);
        do Memory.poke(memAddress+128, -8185);
        do Memory.poke(memAddress+160, -8185);
        do Memory.poke(memAddress+192, -8185);
        do Memory.poke(memAddress+224, -8185);
        do Memory.poke(memAddress+256, -8185);
        do Memory.poke(memAddress+288, -8185);
        do Memory.poke(memAddress+320, -8185);
        do Memory.poke(memAddress+352, -8185);
        do Memory.poke(memAddress+384, -4089);
        do Memory.poke(memAddress+416, 30727);
        do Memory.poke(memAddress+448, 16383);
        do Memory.poke(memAddress+480, 8191);
        return;
    }
    method void draw_N() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, -16381);
        do Memory.poke(memAddress+32, -16377);
        do Memory.poke(memAddress+64, -16369);
        do Memory.poke(memAddress+96, -16353);
        do Memory.poke(memAddress+128, -16325);
        do Memory.poke(memAddress+160, -16269);
        do Memory.poke(memAddress+192, -16157);
        do Memory.poke(memAddress+224, -15933);
        do Memory.poke(memAddress+256, -15485);
        do Memory.poke(memAddress+288, -14589);
        do Memory.poke(memAddress+320, -12797);
        do Memory.poke(memAddress+352, -9213);
        do Memory.poke(memAddress+384, -2045);
        do Memory.poke(memAddress+416, -4093);
        do Memory.poke(memAddress+448, -8189);
        do Memory.poke(memAddress+480, -16381);
        return;
    }
    method void draw_S() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
            do Memory.poke(memAddress+0, -8);
            do Memory.poke(memAddress+32, -4);
            do Memory.poke(memAddress+64, 2);
            do Memory.poke(memAddress+96, 3);
            do Memory.poke(memAddress+128, 3);
            do Memory.poke(memAddress+160, 3);
            do Memory.poke(memAddress+192, 3);
            do Memory.poke(memAddress+224, 16382);
            do Memory.poke(memAddress+256, 32764);
            do Memory.poke(memAddress+288, -16384);
            do Memory.poke(memAddress+320, -16384);
            do Memory.poke(memAddress+352, -16384);
            do Memory.poke(memAddress+384, -16384);
            do Memory.poke(memAddress+416, 16384);
            do Memory.poke(memAddress+448, 16383);
            do Memory.poke(memAddress+480, 8191);
            return;
        }
    method void draw_K() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, 1799);
        do Memory.poke(memAddress+32, 903);
        do Memory.poke(memAddress+64, 455);
        do Memory.poke(memAddress+96, 231);
        do Memory.poke(memAddress+128, 119);
        do Memory.poke(memAddress+160, 63);
        do Memory.poke(memAddress+192, 31);
        do Memory.poke(memAddress+224, 127);
        do Memory.poke(memAddress+256, 231);
        do Memory.poke(memAddress+288, 455);
        do Memory.poke(memAddress+320, 903);
        do Memory.poke(memAddress+352, 1799);
        do Memory.poke(memAddress+384, 3591);
        do Memory.poke(memAddress+416, 7175);
        do Memory.poke(memAddress+448, 14343);
        do Memory.poke(memAddress+480, 28679);
        return;
    }
    method void draw_W() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);        
        do Memory.poke(memAddress+0, -32767);
        do Memory.poke(memAddress+32, -32767);
        do Memory.poke(memAddress+64, -16381);
        do Memory.poke(memAddress+96, -16381);
        do Memory.poke(memAddress+128, 16386);
        do Memory.poke(memAddress+160, 24966);
        do Memory.poke(memAddress+192, 24966);
        do Memory.poke(memAddress+224, 9156);
        do Memory.poke(memAddress+256, 13260);
        do Memory.poke(memAddress+288, 12876);
        do Memory.poke(memAddress+320, 4680);
        do Memory.poke(memAddress+352, 4680);
        do Memory.poke(memAddress+384, 5736);
        do Memory.poke(memAddress+416, 7800);
        do Memory.poke(memAddress+448, 3120);
        do Memory.poke(memAddress+480, 3120);
        return;
    }

    method void draw_UP() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);      
          do Memory.poke(memAddress+0, 384);
        do Memory.poke(memAddress+32, 960);
        do Memory.poke(memAddress+64, 2016);
        do Memory.poke(memAddress+96, 4080);
        do Memory.poke(memAddress+128, 8184);
        do Memory.poke(memAddress+160, 16380);
        do Memory.poke(memAddress+192, 32766);
        do Memory.poke(memAddress+224, 384);
        do Memory.poke(memAddress+256, 384);
        do Memory.poke(memAddress+288, 384);
        do Memory.poke(memAddress+320, 384);
        do Memory.poke(memAddress+352, 384);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 384);
        do Memory.poke(memAddress+448, 384);
        do Memory.poke(memAddress+480, 0);
        return;
    }
    method void draw_Right() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);        
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 512);
        do Memory.poke(memAddress+64, 1536);
        do Memory.poke(memAddress+96, 3584);
        do Memory.poke(memAddress+128, 7680);
        do Memory.poke(memAddress+160, 15872);
        do Memory.poke(memAddress+192, 32256);
        do Memory.poke(memAddress+224, -2);
        do Memory.poke(memAddress+256, -2);
        do Memory.poke(memAddress+288, 32256);
        do Memory.poke(memAddress+320, 15872);
        do Memory.poke(memAddress+352, 7680);
        do Memory.poke(memAddress+384, 3584);
        do Memory.poke(memAddress+416, 1536);
        do Memory.poke(memAddress+448, 512);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    method void draw_Down() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32); 
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 384);
        do Memory.poke(memAddress+64, 384);
        do Memory.poke(memAddress+96, 384);
        do Memory.poke(memAddress+128, 384);
        do Memory.poke(memAddress+160, 384);
        do Memory.poke(memAddress+192, 384);
        do Memory.poke(memAddress+224, 384);
        do Memory.poke(memAddress+256, 32766);
        do Memory.poke(memAddress+288, 16380);
        do Memory.poke(memAddress+320, 8184);
        do Memory.poke(memAddress+352, 4080);
        do Memory.poke(memAddress+384, 2016);
        do Memory.poke(memAddress+416, 960);
        do Memory.poke(memAddress+448, 384);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    method void draw_Left() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);       
         do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 64);
        do Memory.poke(memAddress+64, 96);
        do Memory.poke(memAddress+96, 112);
        do Memory.poke(memAddress+128, 120);
        do Memory.poke(memAddress+160, 124);
        do Memory.poke(memAddress+192, 126);
        do Memory.poke(memAddress+224, 32767);
        do Memory.poke(memAddress+256, 32767);
        do Memory.poke(memAddress+288, 126);
        do Memory.poke(memAddress+320, 124);
        do Memory.poke(memAddress+352, 120);
        do Memory.poke(memAddress+384, 112);
        do Memory.poke(memAddress+416, 96);
        do Memory.poke(memAddress+448, 64);
        do Memory.poke(memAddress+480, 0);
        return;
    }
    method void TankRight() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32); 
        do Memory.poke(memAddress+0, 8191);
        do Memory.poke(memAddress+32, 8191);
        do Memory.poke(memAddress+64, 8191);
        do Memory.poke(memAddress+96, 2044);
        do Memory.poke(memAddress+128, 2044);
        do Memory.poke(memAddress+160, 2044);
        do Memory.poke(memAddress+192, 2044);
        do Memory.poke(memAddress+224, -196);
        do Memory.poke(memAddress+256, -196);
        do Memory.poke(memAddress+288, 2044);
        do Memory.poke(memAddress+320, 2044);
        do Memory.poke(memAddress+352, 2044);
        do Memory.poke(memAddress+384, 2044);
        do Memory.poke(memAddress+416, 8191);
        do Memory.poke(memAddress+448, 8191);
        do Memory.poke(memAddress+480, 8191);
            return;
    }
    method void TankLeft() {
        var int memAddress;
        let memAddress = 16384 + (cursor_x/16) + (cursor_y*32);
        do Memory.poke(memAddress+0, -8);
            do Memory.poke(memAddress+32, -8);
            do Memory.poke(memAddress+64, -8);
            do Memory.poke(memAddress+96, 16352);
            do Memory.poke(memAddress+128, 16352);
            do Memory.poke(memAddress+160, 16352);
            do Memory.poke(memAddress+192, 16352);
            do Memory.poke(memAddress+224, 15615);
            do Memory.poke(memAddress+256, 15615);
            do Memory.poke(memAddress+288, 16352);
            do Memory.poke(memAddress+320, 16352);
            do Memory.poke(memAddress+352, 16352);
            do Memory.poke(memAddress+384, 16352);
            do Memory.poke(memAddress+416, -8);
            do Memory.poke(memAddress+448, -8);
            do Memory.poke(memAddress+480, -8);
            return;
    }
    method void printBackground(){
        var Terminate terminate;
        do terminate.printBackground();
        return;
    }
}