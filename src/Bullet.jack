class Bullet {
    field int x, y; 

    constructor Bullet new() {
        let x = 100;
        let y = 100;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void setXY(int bx, int by) {
        let x = bx;
        let y = by;
        return;
    }

    method int getX() {return x;}

    method int getY() {return y;}

    method boolean checkCollision(Bullet b, Tank one, Tank two) //Checks if one hit two, Here one and two are generalised
    {
        var int bx, by, tx, ty, t1x, t1y;
        let bx = b.getX();
        let by = b.getY();
        let tx = two.getX();
        let ty = two.getY();
        let t1x = one.getX();
        let t1y = one.getY();


        if(one.getDir() = 0){return false;}
        if(one.getDir() = 1){
            if (by < ty) { 
                if (bx > (tx - 15)) {
                    if (bx < (tx + 15)) {
                        //return 1;
                        if(t1y>ty){return true;}
                    }
                }
            }	
        }

        if(one.getDir() = 2){
            if (bx > tx) {
                if (by > (ty - 15)) {
                    if (by < (ty + 15)) {
                        //return 2;
                        if(t1x<tx){return true;}
                    }
                }
            }
        }

        if(one.getDir() = 3){
            if (by > ty) { 
                
                if (bx > (tx - 15)) {
                    if (bx < (tx + 15)) {
                        //return 3;
                        if(t1y<ty){return true;}
                    }
                }
            }
        }

        if(one.getDir() = 4){
            if (bx < tx) { 
                if (by > (ty - 15)) {
                    if (by < (ty + 15)) {
                        //return 4;
                        if(t1x>tx){return true;}
                    }
                }
            }
        }
        return false;
    }

    method boolean fire(Tank one, Tank two ,Bullet bullet) {
        var int Ax;
        var int Ay;
        var int dir;
        var boolean collisionhappend;

        let Ax = one.getX();
        let Ay = one.getY();
        let dir = one.getDir();

        if(dir = 1 ){
            do setXY(Ax,Ay - 16);
            while (y > 1) {
                do erase();
                let y = y - 1;
                if ( y = (two.getY()+17) ){
                    if ( ( x>(two.getX()-15) ) & ( x<(two.getX()+10)) ){
                        do explode(two.getX(), two.getY() , two.getDir());
                        do two.erase();
                        let y = 0;
                        let collisionhappend = true;
                    }
                }else{
                    do drawUp();
                }
                do Sys.wait(3);
            }
            if(~(y>1)){do erase();}
        }
        else{
            if(dir = 2){
                do setXY(Ax + 16,Ay);
                while (x + 1 < 511) {    //(x + 1 < 511)
                    do erase();
                    let x = x + 1;
                    if ( x = ( two.getX()- 1 ) ){
                        if (( y>(two.getY()-15) ) & ( y<(two.getY()+10) ) ){
                            do explode(two.getX(), two.getY() , two.getDir());
                            do two.erase();
                            let x = 520;
                            let collisionhappend = true;
                        }
                    }else{
                        do drawRight();
                    }
                    do Sys.wait(3);
                }
                if(~(x + 1 < 511)){do erase();}
            }
            else{
                if(dir = 3){
                    do setXY(Ax,Ay + 16);   
                    while (y+1 < 195) {     //(y+1 < 239)
                        do erase();
                        let y = y + 1;
                        if ( y = (two.getY()-1) ){
                            if (( x>(two.getX()-15) ) & ( x<(two.getX()+10) ) ){
                                do explode(two.getX(), two.getY() , two.getDir());
                                do two.erase();
                                let y = 220;
                                let collisionhappend = true;
                            }
                        }else{
                            do drawDown();
                        }
                        do Sys.wait(3);
                    }
                    do erase();
                    if(~(y+1 < 200)){do erase();}
                }
                else{
                    if(dir= 4){
                        do setXY(Ax - 16,Ay);
                        while (x - 1 > 0) {   //(x - 1 > 0)
                            do erase();
                            let x = x - 1;
                            if ( x = ( two.getX() + 17 ) ){
                                if (( y>(two.getY()-15) ) & ( y<(two.getY()+10) ) ){
                                    do explode(two.getX(), two.getY(), two.getDir());
                                    do two.erase();
                                    let x = 0;
                                    let collisionhappend = true;
                                }
                            }else{
                                do drawLeft();
                            }
                            do Sys.wait(3);
                        }
                        if(~(x - 1 > 0)){do erase();}
                    }
                }
            }
        }

        let collisionhappend = checkCollision(bullet , one , two);

        if (collisionhappend){
            do two.erase();
            do one.erase();
            return true;
        }

        return false;
    }

    method void explode(int Ax, int Ay ,int dir) {
        var int explosionR;
        var int explosionR;
        var int maxExplosionR;
        var int maxExplosionR;
        
        
        let explosionR = 2;
        let explosionR = 2;
        let maxExplosionR = 8;
        let maxExplosionR = 8;


        while(explosionR<maxExplosionR){
            let explosionR = explosionR + 2;
            let explosionR = explosionR + 2;
            do erase();
            do erase();
            do Screen.setColor(true);
            do Screen.setColor(true);
            do Screen.drawCircle(Ax + 1, Ay + 7, explosionR);
            do Screen.drawCircle(Ax + 1, Ay + 7, explosionR);
            do Screen.setColor(false);
            do Screen.setColor(false);
            do Screen.drawCircle(Ax + 1, Ay + 7, explosionR-2);
            do Screen.drawCircle(Ax + 1, Ay + 7, explosionR-2);
            do Sys.wait(150);
            do Sys.wait(150);
        }
        do Screen.setColor(false);
        do Screen.setColor(false);
        do Screen.drawCircle(Ax + 1, Ay + 7, explosionR);
        do Screen.drawCircle(Ax + 1, Ay + 7, explosionR);
        return;
    }

    method void drawUp() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress+0, 384);
        do Memory.poke(memAddress+32, 960);
        do Memory.poke(memAddress+64, 2016);
        do Memory.poke(memAddress+96, 4080);
        do Memory.poke(memAddress+128, 8184);
        do Memory.poke(memAddress+160, 16380);
        do Memory.poke(memAddress+192, 32766);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    method void drawRight() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress+0, 256);
	    do Memory.poke(memAddress+32, 768);
	    do Memory.poke(memAddress+64, 1792);
	    do Memory.poke(memAddress+96, 3840);
	    do Memory.poke(memAddress+128, 7936);
	    do Memory.poke(memAddress+160, 16128);
	    do Memory.poke(memAddress+192, 32512);
	    do Memory.poke(memAddress+224, -256);
	    do Memory.poke(memAddress+256, -256);
	    do Memory.poke(memAddress+288, 32512);
	    do Memory.poke(memAddress+320, 16128);
	    do Memory.poke(memAddress+352, 7936);
	    do Memory.poke(memAddress+384, 3840);
	    do Memory.poke(memAddress+416, 1792);
	    do Memory.poke(memAddress+448, 768);
	    do Memory.poke(memAddress+480, 256);
        return;
    }

    method void drawDown() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress+0, 0);
	    do Memory.poke(memAddress+32, 0);
	    do Memory.poke(memAddress+64, 0);
	    do Memory.poke(memAddress+96, 0);
	    do Memory.poke(memAddress+128, 0);
	    do Memory.poke(memAddress+160, 0);
	    do Memory.poke(memAddress+192, 0);
	    do Memory.poke(memAddress+224, 0);
	    do Memory.poke(memAddress+256, -1);
	    do Memory.poke(memAddress+288, 32766);
	    do Memory.poke(memAddress+320, 16380);
	    do Memory.poke(memAddress+352, 8184);
	    do Memory.poke(memAddress+384, 4080);
	    do Memory.poke(memAddress+416, 2016);
	    do Memory.poke(memAddress+448, 960);
	    do Memory.poke(memAddress+480, 384);
        return;
    }

    method void drawLeft() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress+0, 128);
	    do Memory.poke(memAddress+32, 192);
	    do Memory.poke(memAddress+64, 224);
	    do Memory.poke(memAddress+96, 240);
	    do Memory.poke(memAddress+128, 248);
	    do Memory.poke(memAddress+160, 252);
	    do Memory.poke(memAddress+192, 254);
	    do Memory.poke(memAddress+224, 255);
	    do Memory.poke(memAddress+256, 255);
	    do Memory.poke(memAddress+288, 254);
	    do Memory.poke(memAddress+320, 252);
	    do Memory.poke(memAddress+352, 248);
	    do Memory.poke(memAddress+384, 240);
	    do Memory.poke(memAddress+416, 224);
	    do Memory.poke(memAddress+448, 192);
	    do Memory.poke(memAddress+480, 128);
        return;
    }

    method void erase() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
}